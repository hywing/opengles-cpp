#include "object_shader_helper.h"

#if true
static const char *vertex_shader
    = "#ifdef GL_ES\n"
      "precision mediump int;\n"
      "precision mediump float;\n"
      "#endif\n"
      "attribute vec3 vPosition;\n"
      "attribute vec2 vCoord;\n"
      "uniform mat4 vMatrix;\n"
      "uniform vec3 vKa;\n"
      "uniform vec3 vKd;\n"
      "uniform vec3 vKs;\n"
      "varying vec2 textureCoordinate;\n"
      "attribute vec3 vNormal;\n"
      "varying vec4 vDiffuse;\n"
      "varying vec4 vAmbient;\n"
      "varying vec4 vSpecular;\n"
      "void calculateLight(\n"
      "   vec3 normal,\n"
      "   vec4 vA,\n"
      "   vec4 vD,\n"
      "   vec4 vS,\n"
      "   vec3 camera,\n"
      "   vec3 lightLocation,\n"
      "   vec4 lightAmbient,\n"
      "   vec4 lightDiffuse,\n"
      "   vec4 lightSpecular) {\n"
      "   vA=lightAmbient;\n"
      "   vec3 normalTarget=vPosition+normal;\n"
      "   vec3 newNormal=(vMatrix*vec4(normalTarget,1)).xyz-(vMatrix*vec4(vPosition,1)).xyz;\n"
      "   newNormal=normalize(newNormal);\n"
      "   vec3 eye= normalize(camera-(vMatrix*vec4(vPosition,1)).xyz);\n"
      "   vec3 vp= normalize(lightLocation-(vMatrix*vec4(vPosition,1)).xyz);\n"
      "   vp=normalize(vp);\n"
      "   vec3 halfVector=normalize(vp+eye);\n"
      "   float shininess=50.0;\n"
      "   float nDotViewPosition=max(0.0,dot(newNormal,vp));\n"
      "   vD=lightDiffuse*nDotViewPosition;\n"
      "   float nDotViewHalfVector=dot(newNormal,halfVector);\n"
      "   float powerFactor=max(0.0,pow(nDotViewHalfVector,shininess));\n"
      "   vS=lightSpecular*powerFactor;\n"
      "}\n"
      "void main(){\n"
      "   gl_Position = vMatrix*vec4(vPosition,1);\n"
      "   textureCoordinate = vCoord;\n"
      "   vec3 lightLocation=vec3(0.0,-200.0,-500.0);\n"
      "   vec3 camera=vec3(0,200.0,0);\n"
      "   float shininess=10.0;\n"
      "   vec3 newNormal=normalize((vMatrix*vec4(vNormal+vPosition,1)).xyz-(vMatrix*vec4(vPosition,1)).xyz);\n"
      "   vec3 vp=normalize(lightLocation-(vMatrix*vec4(vPosition,1)).xyz);\n"
      "   vDiffuse=vec4(vKd,1.0)*max(0.0,dot(newNormal,vp));\n"
      "   vec3 eye= normalize(camera-(vMatrix*vec4(vPosition,1)).xyz);\n"
      "   vec3 halfVector=normalize(vp+eye);\n"
      "   float nDotViewHalfVector=dot(newNormal,halfVector);\n"
      "   float powerFactor=max(0.0,pow(nDotViewHalfVector,shininess));\n"
      "   vSpecular=vec4(vKs,1.0)*powerFactor;\n"
      "   vAmbient=vec4(vKa,1.0);\n"
      "}";

static const char *fragment_shader
    = "#ifdef GL_ES\n"
      "precision mediump int;\n"
      "precision mediump float;\n"
      "#endif\n"
      "varying vec2 textureCoordinate;\n"
      "uniform sampler2D vTexture;\n"
      "varying vec4 vDiffuse;\n"
      "varying vec4 vAmbient;\n"
      "varying vec4 vSpecular;\n"
      "void main() {\n"
      "   vec4 finalColor=texture2D(vTexture,textureCoordinate);\n"
      "   gl_FragColor=finalColor*vAmbient+finalColor*vSpecular+finalColor*vDiffuse;\n"
      "}";
#else
static const char *object_vertex_shader
    = "#ifdef GL_ES\n"
      "precision mediump int;\n"
      "precision mediump float;\n"
      "#endif\n"
      "attribute vec4 posAttr;\n"
      "attribute vec4 colAttr;\n"
      "varying vec4 col;\n"
      "uniform mat4 matrix;\n"
      "uniform vec3 vKa;\n"
      "uniform vec3 vKd;\n"
      "uniform vec3 vKs;\n"
      "void main()\n"
      "{\n"
      "   col = colAttr;\n"
      "   gl_Position = matrix * posAttr;\n"
      "}\n";

static const char *object_fragment_shader
    = "#ifdef GL_ES\n"
      "precision mediump int;\n"
      "precision mediump float;\n"
      "#endif\n"
      "varying vec4 col;\n"
      "void main()\n"
      "{\n"
      "   gl_FragColor = col;\n"
      "}\n";
#endif

SINGLETON_IMPLEMENT(ObjectShaderHelper)
